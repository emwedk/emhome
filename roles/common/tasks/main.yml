---
- name: Allow current user to escalate with doas without password
  ansible.builtin.copy:
    dest: "/etc/doas.d/20-{{ user.name }}.conf"
    content: "permit nopass {{ user.name }} as root\n"
    owner: root
    group: root
    mode: '0755'

- name: Ensure dependency packages are installed
  package:
    name:
      - python3
      - python3-dev
      - py3-requests
      - py3-pip
      - npm
      - git
      - curl
      - dbus
      - bluez
      - openrc
      - tar
      - unzip
      - iptables
      - iptables-save
    state: present

- name: Create common groups
  group: "name={{ item }} state=present"
  with_items:
    - docker
    - dialout
    - bluetooth
    - "{{ user.name }}"

- name: "Create user '{{ user.name }}'"
  user:
    name: "{{ user.name }}"
    group: "{{ user.name }}"
    groups: "{{ user.name }},docker,dialout,bluetooth"
    append: yes

- name: "Ensure directory for container installations exists with proper permissions"
  file:
    path: "{{ dir.data }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: '0755'

- name: Check for Bluetooth device (optional)
  shell: "hciconfig | grep -q hci0"
  register: bt_check
  ignore_errors: true

- name: Warn if Bluetooth device not found
  debug:
    msg: "Bluetooth device not found. Bluetooth features will be unavailable."
  when: bt_check.rc != 0

- name: Check if .passwd file exists in the base directory
  stat:
    path: "/home/{{ user.name }}/.passwd"
  register: passwd_file

- name: Read .passwd file if it exists and is not empty
  slurp:
    src: "/home/{{ user.name }}/.passwd"
  register: passwd_content
  when: passwd_file.stat.exists and passwd_file.stat.size > 0

- name: Set user.pass to contents of .passwd if file exists and is not empty
  set_fact:
    user: "{{ user | combine({'pass': (passwd_content.content | b64decode | trim)}) }}"
  when: passwd_file.stat.exists and passwd_file.stat.size > 0

- name: Open port 80 (HTTP) in iptables
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 80
    jump: ACCEPT
    state: present
    comment: "Allow HTTP traffic"

- name: Open port 443 (HTTPS) in iptables
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 443
    jump: ACCEPT
    state: present
    comment: "Allow HTTPS traffic"

- name: Open port 8080 (Traefik dashboard or alternate HTTP) in iptables
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 8080
    jump: ACCEPT
    state: present
    comment: "Allow Traefik dashboard or alternate HTTP traffic"

- name: Save iptables rules (persist across reboots)
  become: true
  command: iptables-save > /etc/iptables/rules.v4
  args:
    creates: /etc/iptables/rules.v4