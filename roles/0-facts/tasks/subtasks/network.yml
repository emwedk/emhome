---
- name: "Register Network Info for the Bridge network"
  community.docker.docker_network_info:
    name: bridge
  register: network_bridge

- name: "Ensure network exists: {{ smarthome.network }}"
  community.docker.docker_network:
    name: "{{ smarthome.network }}"
    internal: no
    state: "present"
  register: network_proxy

- name: Add trusted networks to smarthome dictionary
  set_fact:
    smarthome: >-
      {{
        smarthome | combine({
          'trusted_networks': [
            "127.0.0.1",
            smarthome.local_network,
            network_bridge.network.IPAM.Config[0].Subnet,
            network_proxy.network.IPAM.Config[0].Subnet
          ]
        })
      }}

- name: "Allow traffic from Docker bridge subnet {{ network_bridge.network.IPAM.Config[0].Subnet }} via UFW"
  ansible.builtin.ufw:
    rule: allow
    from_ip: "{{ network_bridge.network.IPAM.Config[0].Subnet }}"

- name: "Allow traffic from Docker bridge subnet {{ network_proxy.network.IPAM.Config[0].Subnet }} via UFW"
  ansible.builtin.ufw:
    rule: allow
    from_ip: "{{ network_proxy.network.IPAM.Config[0].Subnet }}"

# # --- Initialize smarthome_domains list ---

# - name: Initialize smarthome_domains list
#   set_fact:
#     smarthome_domains: []

# - name: Add FQDNs for all apps to smarthome_domains
#   set_fact:
#     smarthome_domains: "{{ smarthome_domains + [ (app[item].subdomain | default(item)) ~ '.' ~ smarthome.domain ] }}"
#   loop: "{{ app.keys() }}"

# - name: Ensure base domain is included in smarthome_domains
#   set_fact:
#     smarthome_domains: "{{ smarthome_domains + [smarthome.domain] if smarthome.domain not in smarthome_domains else smarthome_domains }}"




