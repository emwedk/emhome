---
# - name: "Remove directories for: {{ service.name }}"
#   file:
#     path: "{{ item }}"
#     state: "absent"
#     force: true
#   loop:
#     - "{{ service.dir }}"
#     - "{{ service.logdir }}"
#   when: rebuild | default(false) | bool
- name: "Remove directories for: {{ service.name }}"
  file:
    path: "{{ item }}"
    state: "absent"
    force: true
  loop:
    - "{{ service.dir }}/traefik_dynamic.yml"
    - "{{ service.logdir }}"
  when: rebuild | default(false) | bool

- name: "Create directory for: {{ service.name }}"
  file:
    path: "{{ service.dir }}/letsencrypt"
    state: "directory"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0755"



# - name: Copy Traefik config
#   template:
#     src: traefik.yml.j2
#     dest: "{{ service.dir }}/traefik.yml"
#     owner: "{{ user.name }}"
#     group: "{{ user.name }}"
#     mode: '0644'

- name: Copy Traefik dynamic config
  template:
    src: traefik_dynamic.yml.j2
    dest: "{{ service.dir }}/traefik_dynamic.yml"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: '0644'

- name: Set acme.json permissions
  copy:
    dest: "{{ service.dir }}/letsencrypt/acme.json"
    content: ""
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0600"
    force: no


- name: Build dynamic labels dictionary
  set_fact:
    dynamic_labels: >-
      {{
        {
          'traefik.enable': 'true',
          'traefik.docker.network': smarthome.network,
          ('traefik.http.routers.' ~ service.name ~ '-dashboard.rule'): 'Host(`' ~ service.domain ~ '`)',
          ('traefik.http.routers.' ~ service.name ~ '-dashboard.entrypoints'): 'websecure',
          ('traefik.http.routers.' ~ service.name ~ '-dashboard.service'): 'api@internal',
          ('traefik.http.services.' ~ service.name ~ '-dashboard.loadbalancer.server.port'): service.port,
        }
      }}
#('traefik.http.routers.' ~ service.name ~ '.rule'): 'Host(`' ~ service.name ~ '.local`)',
#('traefik.http.routers.http-catchall.middlewares'): 'redirect-to-https',
#('traefik.http.middlewares.redirect-to-https.redirectscheme.scheme'): 'https',
#('traefik.http.routers.http-catchall.rule'): 'HostRegexp(`{host:.+}`)',
#('traefik.http.routers.' ~ service.name ~ '-dashboard.middlewares'): service.name ~ '-auth',
#('traefik.http.middlewares.' ~ service.name ~ '-auth.basicauth.users'): user.hash
# ('traefik.http.services.' ~ service.name ~ '-dashboard.loadbalancer.passhostheader'): 'true',
# ('traefik.http.routers.' ~ service.name ~ '.middlewares'): 'comp',
# ('traefik.http.routers.' ~ service.name ~ '.middlewares'): 'sslheader',

- name: "Run container: {{ service.name }}"
  community.docker.docker_container:
    name: "{{ service.name }}"
    hostname: "{{ service.name }}"
    domainname : "{{ smarthome.domain }}"
    image: "{{ service.image }}:{{ service.version }}"
    pull: "{{ update }}"
    recreate: "{{ rebuild }}"
    state: started
    restart: true
    restart_policy: unless-stopped
    # security_opts:
    #   - no-new-privileges=true
    dns_servers:
      - "172.17.0.1"
    networks:
      - name: bridge
      - name: "{{ smarthome.network }}"
        aliases:
          - "{{ service.name }}"
    exposed_ports:
      - "{{ service.port }}"
    ports:
      - "80:80"
      - "443:443"
      # - "127.0.0.1:{{ service.port }}:8080"
    etc_hosts:
      host.docker.internal: host-gateway
    # capabilities:
    #   - NET_ADMIN
    #   - NET_RAW
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - "{{ service.dir }}/traefik_dynamic.yml:/etc/traefik/traefik_dynamic.yml"
      - "{{ service.dir }}/letsencrypt:/etc/traefik/letsencrypt"
      - "{{ service.logdir }}:/var/log"
    env:
      TZ: "{{ tz }}"
      PUID: "{{ user.puid }}"
      PGID: "{{ user.pgid }}"
      TRAEFIK_DASHBOARD_CREDENTIALS: "{{ user.hash }}"
      DUCKDNS_TOKEN: "{{ secret.duckdns.token }}"
      DUCKDNS_DOMAIN: "{{ secret.duckdns.domain }}"
      DUCKDNS_SUBDOMAIN: "{{ secret.duckdns.domain }}"
      # DNS: "8.8.4.4"
    labels: "{{ dynamic_labels }}"
    command:
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.asDefault=true"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certresolver=letsencrypt"
      - "--entrypoints.websecure.http.tls.domains[0].main={{ smarthome.domain }}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.{{ smarthome.domain }}"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=duckdns"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.propagation.delayBeforeChecks=60"
      # - "--certificatesresolvers.letsencrypt.acme.dnschallenge.propagation.disableChecks=true"
      - "--certificatesresolvers.letsencrypt.acme.email={{ secret.letsencrypt.email }}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      # - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory" # letsencrypt staging server
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=172.17.0.1:53"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.network={{ smarthome.network }}"
      - "--providers.file.filename=/etc/traefik/traefik_dynamic.yml"
      - "--providers.file.watch=true"

- name: Install traefik-certs-dumper
  import_tasks: "subtasks/cert_dumper.yml"