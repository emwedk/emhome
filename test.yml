---
- hosts: localhost
  become: true
  become_method: doas
  become_user: root
  gather_facts: true

  vars:
    usb_dev: "/dev/ttyUSB0"

  tasks:
    # - name: Read /etc/os-release
    #   ansible.builtin.slurp:
    #     src: /etc/os-release
    #   register: system_os_file

    # - name: Set system_os fact from /etc/os-release
    #   set_fact:
    #     system_os: "{{ (system_os_file['content'] | b64decode).split('\n') | select('match', '^ID=') | list | first | regex_replace('^ID=\"?([^\"]+)\"?$', '\\1') }}"
    
    # - name: DEBUG
    #   debug:
    #     var: system_os

    # - name: Set USB Autosuspend to 0 | Get the real device path from the by-id symlink
    #   command: readlink -f /dev/serial/by-id/{{ usb_by_id_name }}
    #   register: real_device_path
    #   changed_when: false

    # - name: Set USB Autosuspend to 0 | Get the serial number from the device's sysfs path
    #   shell: |
    #     udevadm info -q property -n {{ real_device_path.stdout }} | grep ID_SERIAL_SHORT= | cut -d= -f2
    #   register: device_serial
    #   changed_when: false

    # - name: Set USB Autosuspend to 0 | Find all USB devices directories
    #   find:
    #     paths: /sys/bus/usb/devices/
    #     file_type: any
    #     patterns: usb[0-9]
    #     use_regex: true
    #   register: usb_dirs

    # - name: Set USB Autosuspend to 0 | Find all 'serial' files recursively in each USB device directory
    #   find:
    #     paths: "{{ item.path }}"
    #     patterns: serial
    #     file_type: file
    #     recurse: true
    #   loop: "{{ usb_dirs.files }}"
    #   register: found_serials

    # - name: Set USB Autosuspend to 0 | Combine all found serial files into a single list
    #   set_fact:
    #     usb_serial_files: "{{ usb_serial_files | default([]) + (item.files | default([])) }}"
    #   loop: "{{ found_serials.results }}"

    # - name: Set USB Autosuspend to 0 | Read serials from all USB device directories
    #   slurp:
    #     src: "{{ item.path }}"
    #   loop: "{{ usb_serial_files }}"
    #   register: usb_serial_contents

    # - name: Set USB Autosuspend to 0 | Find the USB device directory matching the serial
    #   set_fact:
    #     matched_usb_device_dir: "{{ item.item.path | regex_replace('/serial$', '') }}"
    #   loop: "{{ usb_serial_contents.results }}"
    #   when: (item.content | b64decode | trim) == device_serial.stdout

    # - name: Disable autosuspend (idempotent)
    #   ansible.builtin.shell: "echo 0 > {{ matched_usb_device_dir.stdout }}/power/autosuspend"

    # - name: Debug matched USB device directory
    #   debug:
    #     msg: "USB device directory for {{ usb_by_id_name }} is {{ matched_usb_device_dir }}"
    #   when: matched_usb_device_dir is defined

    # - name: Get actual device path from serial symlink
    #   command: readlink -f /dev/serial/by-id/usb-SMLIGHT_SMLIGHT_SLZB-07Mg24_fa8db40321adef11b54b924ba8793231-if00-port0
    #   register: device_real_path

    - name: Get sysfs path of the USB device
      command: udevadm info --query=path --name={{ usb_dev }}
      register: usb_sysfs_path

    - name: Get idVendor and idProduct
      command: udevadm info --attribute-walk --path={{ usb_sysfs_path.stdout }}
      register: udevadm_output

    - name: Parse idVendor from udevadm output
      set_fact:
        usb_id_vendor: "{{ udevadm_output.stdout | regex_search('ATTR\\{idVendor\\}==\\\"([0-9a-fA-F]+)\\\"', '\\1') }}"

    - name: Parse idProduct from udevadm output
      set_fact:
        usb_id_product: "{{ udevadm_output.stdout | regex_search('ATTR\\{idProduct\\}==\\\"([0-9a-fA-F]+)\\\"', '\\1') }}"

    - name: Debug USB device information
      debug:
        msg: "USB device vendor: {{ usb_id_vendor }} and product: {{ usb_id_product }}"

    # - name: Create udev rule to disable USB autosuspend
    #   copy:
    #     dest: /etc/udev/rules.d/99-usb-autosuspend.rules
    #     content: |
    #       ACTION=="add", SUBSYSTEM=="usb", ATTR{idVendor}=="{{ usb_id_vendor }}", ATTR{idProduct}=="{{ usb_id_product }}", TEST=="power/control", ATTR{power/control}="on"
    #     owner: root
    #     group: root
    #     mode: '0644'

    # - name: Reload udev rules
    #   command: udevadm control --reload

    # - name: Trigger udev for the device
    #   command: udevadm trigger --subsystem-match=usb --attr-match=idVendor={{ usb_id_vendor }}