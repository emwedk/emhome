---
- hosts: localhost
  become: true
  become_method: doas
  become_user: root
  gather_facts: true

  vars:
    usb_dev: "/dev/ttyUSB0"

  tasks:
    # - name: Read /etc/os-release
    #   ansible.builtin.slurp:
    #     src: /etc/os-release
    #   register: system_os_file

    # - name: Set system_os fact from /etc/os-release
    #   set_fact:
    #     system_os: "{{ (system_os_file['content'] | b64decode).split('\n') | select('match', '^ID=') | list | first | regex_replace('^ID=\"?([^\"]+)\"?$', '\\1') }}"
    
    # - name: DEBUG
    #   debug:
    #     var: system_os

    # - name: Resolve real device path
    #   command: readlink -f /dev/serial/by-id/{{ usb_by_id_name }}
    #   register: device_real_path

    - name: Get sysfs path from resolved device
      command: udevadm info --query=path --name={{ usb_dev }}
      register: sysfs_path

    - name: Get udevadm attribute walk from sysfs path
      command: udevadm info --attribute-walk --path=/sys{{ sysfs_path.stdout }}
      register: udevadm_output

    - name: Extract parent sysfs paths
      set_fact:
        parent_paths: "{{ udevadm_output.stdout | regex_findall(\"looking at parent device '(/devices[^\\']+)'\") }}"

    - name: Gather udev attributes for each parent device
      shell: |
        udevadm info --path=/sys{{ item }} --attribute-walk | grep -E 'idVendor|idProduct|serial'
      loop: "{{ parent_paths }}"
      register: parent_attrs
      changed_when: false
      ignore_errors: yes

    - name: Filter successful results
      set_fact:
        parent_attrs: "{{ parent_attrs.results | selectattr('rc', 'equalto', 0) | list }}"

    - name: debug
      debug:
        var: parent_attrs

    - name: Build udev rule lines for autosuspend=off
      set_fact:
        udev_rule_lines: >-
          {{
            parent_attrs
            | map('extract', ['item', 'stdout_lines'])
            | map('combine', ['path', 'lines'])
            | map('combine', lambda d: {
                'vendor': (
                  d.lines | select('search', 'idVendor')
                          | map('regex_search', 'idVendor\\}==\\"([0-9a-fA-F]+)\\"')
                          | select('string') | list | first | default('')
                ),
                'product': (
                  d.lines | select('search', 'idProduct')
                          | map('regex_search', 'idProduct\\}==\\"([0-9a-fA-F]+)\\"')
                          | select('string') | list | first | default('')
                ),
                'serial': (
                  d.lines | select('search', 'serial')
                          | map('regex_search', 'serial\\}==\\"([^"]+)\\"')
                          | select('string') | list | first | default('')
                )
              })
            | selectattr('vendor', '!=', '')
            | selectattr('product', '!=', '')
            | map('combine', lambda d:
                'ACTION=="add", SUBSYSTEM=="usb", ATTR{idVendor}=="%s", ATTR{idProduct}=="%s"%s, TEST=="power/control", ATTR{power/control}="on"' % (
                  d.vendor, d.product,
                  (', ATTR{serial}=="%s"' % d.serial) if d.serial not in ['', 'xhci-hcd.0.auto'] else ''
                )
              )
            | list | unique
          }}

    - name: debug
      debug:
        var: udev_rule_lines

    # - name: Write autosuspend udev rules
    #   copy:
    #     dest: /etc/udev/rules.d/99-disable-usb-autosuspend.rules
    #     content: |
    #       # This file was generated by Ansible to disable USB autosuspend for device {{ usb_by_id_name }}
    #       {% for rule in udev_rule_lines %}
    #       {{ rule }}
    #       {% endfor %}
    #     owner: root
    #     group: root
    #     mode: '0644'

    # - name: Reload udev rules
    #   command: udevadm control --reload

    # - name: Trigger udev rules
    #   command: udevadm trigger --subsystem-match=usb
